#!/usr/bin/env node

// Type generation script for AI Disk Cleaner Web UI
// This script generates TypeScript types from the Python backend

const fs = require('fs')
const path = require('path')

console.log('üîß Generating TypeScript types from Python backend...')

// Define the output directory
const outputDir = path.join(__dirname, '..', 'src', 'types', 'generated')
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true })
}

// Generate basic API types based on the SDD
const apiTypes = `
// Auto-generated types from Python backend
// This file is automatically generated - do not edit manually

export interface BaseApiResponse {
  success: boolean
  message?: string
  timestamp: string
}

export interface ErrorResponse extends BaseApiResponse {
  success: false
  error: {
    code: string
    message: string
    details?: Record<string, any>
  }
}

export interface AnalysisRequest {
  directory_path: string
  options: AnalysisOptions
}

export interface AnalysisOptions {
  include_hidden_files: boolean
  max_file_size: number
  exclude_patterns: string[]
  include_patterns: string[]
  ai_analysis_enabled: boolean
  parallel_processing: boolean
  batch_size: number
  enable_caching: boolean
}

export interface AnalysisResponse extends BaseApiResponse {
  success: true
  data: {
    analysis_id: string
    file_count: number
    estimated_duration: number
  }
}

export interface AnalysisStatusResponse extends BaseApiResponse {
  success: true
  data: {
    status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled'
    progress: number
    files_processed: number
    current_file?: string
    estimated_remaining?: number
  }
}

export interface FileListResponse extends BaseApiResponse {
  success: true
  data: {
    files: FileInfo[]
    total_count: number
    categories: CategorySummary[]
    recommendations: RecommendationInfo[]
  }
}

export interface FileInfo {
  path: string
  name: string
  size: number
  modified_at: string
  category: string
  extension: string
  mime_type: string
  ai_recommendation?: RecommendationInfo
  safety_status: 'safe' | 'caution' | 'protected' | 'dangerous'
  selected_for_deletion: boolean
}

export interface RecommendationInfo {
  action: 'delete' | 'keep' | 'review'
  confidence: number
  reasoning: string
  category: string
  estimated_space_saved: number
  risk_factors: string[]
  alternative_suggestions?: string[]
}

export interface CategorySummary {
  category: string
  count: number
  total_size: number
  average_size: number
  percentage: number
}

export interface SettingsResponse extends BaseApiResponse {
  success: true
  data: {
    openai_api_key: string
    analysis_preferences: UserPreferences
    safety_settings: SafetySettings
  }
}

export interface UserPreferences {
  default_include_hidden: boolean
  default_max_file_size: number
  default_exclude_patterns: string[]
  auto_start_analysis: boolean
  show_recommendations: boolean
  enable_notifications: boolean
}

export interface SafetySettings {
  allow_system_directories: boolean
  require_confirmation: boolean
  backup_before_delete: boolean
  protected_patterns: string[]
}

// WebSocket message types
export interface WebSocketMessage {
  type: string
  data: any
  timestamp: string
}

export interface ProgressUpdateMessage extends WebSocketMessage {
  type: 'progress_update'
  data: {
    analysis_id: string
    progress: number
    current_file?: string
    files_processed: number
    total_files: number
    estimated_remaining?: number
  }
}

export interface AnalysisCompleteMessage extends WebSocketMessage {
  type: 'analysis_complete'
  data: {
    analysis_id: string
    results: AnalysisResults
  }
}

export interface AnalysisErrorMessage extends WebSocketMessage {
  type: 'analysis_error'
  data: {
    analysis_id: string
    error: {
      code: string
      message: string
      details?: Record<string, any>
    }
  }
}

export interface AnalysisResults {
  total_files: number
  total_size: number
  analyzed_files: number
  categories: CategorySummary[]
  recommendations: {
    safe_to_delete: RecommendationGroup
    review_recommended: RecommendationGroup
    keep_recommended: RecommendationGroup
    total_space_saved: number
    total_files_affected: number
  }
  largest_files: FileInfo[]
  oldest_files: FileInfo[]
  duplicates: FileGroup[]
  space_analysis: SpaceAnalysis
}

export interface RecommendationGroup {
  count: number
  total_size: number
  files: FileInfo[]
  categories: string[]
}

export interface FileGroup {
  name: string
  files: FileInfo[]
  total_size: number
  count: number
}

export interface SpaceAnalysis {
  total_space: number
  used_space: number
  free_space: number
  recoverable_space: number
  file_distribution: CategorySummary[]
}
`

// Write the generated types
const outputPath = path.join(outputDir, 'api-types.ts')
fs.writeFileSync(outputPath, apiTypes)

console.log('‚úÖ TypeScript types generated successfully')
console.log(`üìÅ Types written to: ${outputPath}`)

// Generate API client utilities
const apiClientContent = `
// Auto-generated API client
// This file is automatically generated - do not edit manually

import type {
  BaseApiResponse,
  AnalysisRequest,
  AnalysisResponse,
  AnalysisStatusResponse,
  FileListResponse,
  SettingsResponse,
  ErrorResponse
} from './api-types'

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000'

class ApiClient {
  private baseUrl: string

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl
  }

  private async request<T extends BaseApiResponse>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = \`\${this.baseUrl}\${endpoint}\`

    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    })

    if (!response.ok) {
      throw new Error(\`API request failed: \${response.status} \${response.statusText}\`)
    }

    return response.json()
  }

  // Analysis endpoints
  async startAnalysis(request: AnalysisRequest): Promise<AnalysisResponse> {
    return this.request('/api/v1/analysis/start', {
      method: 'POST',
      body: JSON.stringify(request),
    })
  }

  async getAnalysisStatus(analysisId: string): Promise<AnalysisStatusResponse> {
    return this.request(\`/api/v1/analysis/\${analysisId}/status\`)
  }

  async getAnalysisFiles(
    analysisId: string,
    page: number = 1,
    pageSize: number = 100,
    filters?: Record<string, any>
  ): Promise<FileListResponse> {
    const params = new URLSearchParams({
      page: page.toString(),
      page_size: pageSize.toString(),
      ...filters,
    })

    return this.request(\`/api/v1/analysis/\${analysisId}/files?\${params}\`)
  }

  // Settings endpoints
  async getSettings(): Promise<SettingsResponse> {
    return this.request('/api/v1/settings')
  }

  async updateSettings(settings: Partial<any>): Promise<SettingsResponse> {
    return this.request('/api/v1/settings', {
      method: 'PUT',
      body: JSON.stringify(settings),
    })
  }

  // Health check
  async healthCheck(): Promise<{ status: string; timestamp: string }> {
    return this.request('/api/v1/health')
  }
}

export const apiClient = new ApiClient()
export default ApiClient
`

const clientPath = path.join(outputDir, 'api-client.ts')
fs.writeFileSync(clientPath, apiClientContent)

console.log('‚úÖ API client generated successfully')
console.log(`üìÅ Client written to: ${clientPath}`)

console.log('üéâ Type generation complete!')